MODULE_NAME='mPowerShellPCMonitor'(DEV vdvPC[], DEV ipUDPServer)
#INCLUDE 'CustomFunctions'

DEFINE_CONSTANT
INTEGER MAX_SERVICES = 5
INTEGER MAX_PCS 		= 100

DEFINE_TYPE STRUCTURE uService{
	CHAR 		NAME[50]
	CHAR		KEY[50]
	INTEGER 	RUNNING
	INTEGER	SEEN
}

DEFINE_TYPE STRUCTURE uPC{
	CHAR 		REF[50]
	CHAR 		LOC[50]
	CHAR 		DESC[50]
	uService	SERVICE[MAX_SERVICES]
}

DEFINE_TYPE STRUCTURE uPCMonitor{
	// System Values
	CHAR		Rx[1000]
	INTEGER 	IP_PORT
	INTEGER 	DEBUG
	INTEGER	RMS_PEND
	// PCs
	uPC 	  PC[MAX_PCS]
}

DEFINE_CONSTANT
LONG TLID_COMMS_000 = 100
LONG TLID_COMMS_001 = 101
LONG TLID_COMMS_002 = 102
LONG TLID_COMMS_003 = 103
LONG TLID_COMMS_004 = 104
LONG TLID_COMMS_005 = 105
LONG TLID_COMMS_006 = 106
LONG TLID_COMMS_007 = 107
LONG TLID_COMMS_008 = 108
LONG TLID_COMMS_009 = 109
LONG TLID_COMMS_010 = 110
LONG TLID_COMMS_011 = 111
LONG TLID_COMMS_012 = 112
LONG TLID_COMMS_013 = 113
LONG TLID_COMMS_014 = 114
LONG TLID_COMMS_015 = 115
LONG TLID_COMMS_016 = 116
LONG TLID_COMMS_017 = 117
LONG TLID_COMMS_018 = 118
LONG TLID_COMMS_019 = 119
LONG TLID_COMMS_020 = 120
LONG TLID_COMMS_021 = 121
LONG TLID_COMMS_022 = 122
LONG TLID_COMMS_023 = 123
LONG TLID_COMMS_024 = 124
LONG TLID_COMMS_025 = 125
LONG TLID_COMMS_026 = 126
LONG TLID_COMMS_027 = 127
LONG TLID_COMMS_028 = 128
LONG TLID_COMMS_029 = 129
LONG TLID_COMMS_030 = 130
LONG TLID_COMMS_031 = 131
LONG TLID_COMMS_032 = 132
LONG TLID_COMMS_033 = 133
LONG TLID_COMMS_034 = 134
LONG TLID_COMMS_035 = 135
LONG TLID_COMMS_036 = 136
LONG TLID_COMMS_037 = 137
LONG TLID_COMMS_038 = 138
LONG TLID_COMMS_039 = 139
LONG TLID_COMMS_040 = 140
LONG TLID_COMMS_041 = 141
LONG TLID_COMMS_042 = 142
LONG TLID_COMMS_043 = 143
LONG TLID_COMMS_044 = 144
LONG TLID_COMMS_045 = 145
LONG TLID_COMMS_046 = 146
LONG TLID_COMMS_047 = 147
LONG TLID_COMMS_048 = 148
LONG TLID_COMMS_049 = 149
LONG TLID_COMMS_050 = 150
LONG TLID_COMMS_051 = 151
LONG TLID_COMMS_052 = 152
LONG TLID_COMMS_053 = 153
LONG TLID_COMMS_054 = 154
LONG TLID_COMMS_055 = 155
LONG TLID_COMMS_056 = 156
LONG TLID_COMMS_057 = 157
LONG TLID_COMMS_058 = 158
LONG TLID_COMMS_059 = 159
LONG TLID_COMMS_060 = 160
LONG TLID_COMMS_061 = 161
LONG TLID_COMMS_062 = 162
LONG TLID_COMMS_063 = 163
LONG TLID_COMMS_064 = 164
LONG TLID_COMMS_065 = 165
LONG TLID_COMMS_066 = 166
LONG TLID_COMMS_067 = 167
LONG TLID_COMMS_068 = 168
LONG TLID_COMMS_069 = 169
LONG TLID_COMMS_070 = 170
LONG TLID_COMMS_071 = 171
LONG TLID_COMMS_072 = 172
LONG TLID_COMMS_073 = 173
LONG TLID_COMMS_074 = 174
LONG TLID_COMMS_075 = 175
LONG TLID_COMMS_076 = 176
LONG TLID_COMMS_077 = 177
LONG TLID_COMMS_078 = 178
LONG TLID_COMMS_079 = 179
LONG TLID_COMMS_080 = 180
LONG TLID_COMMS_081 = 181
LONG TLID_COMMS_082 = 182
LONG TLID_COMMS_083 = 183
LONG TLID_COMMS_084 = 184
LONG TLID_COMMS_085 = 185
LONG TLID_COMMS_086 = 186
LONG TLID_COMMS_087 = 187
LONG TLID_COMMS_088 = 188
LONG TLID_COMMS_089 = 189
LONG TLID_COMMS_090 = 190
LONG TLID_COMMS_091 = 191
LONG TLID_COMMS_092 = 192
LONG TLID_COMMS_093 = 193
LONG TLID_COMMS_094 = 194
LONG TLID_COMMS_095 = 195
LONG TLID_COMMS_096 = 196
LONG TLID_COMMS_097 = 197
LONG TLID_COMMS_098 = 198
LONG TLID_COMMS_099 = 199
LONG TLID_COMMS_100 = 200

DEFINE_VARIABLE
VOLATILE uPCMonitor 	myPCMonitor
LONG TLT_COMMS[] = { 120000 }
/******************************************************************************
	Helper Functions
******************************************************************************/
DEFINE_FUNCTION fnDebug(CHAR Msg[], CHAR MsgData[]){
	IF(myPCMonitor.DEBUG = 1){
		SEND_STRING 0:0:0, "ITOA(vdvPC[1].Number),':',Msg, ':', MsgData"
	}
}
DEFINE_FUNCTION INTEGER fnGetPCIndex(CHAR pREF[]){
	STACK_VAR INTEGER x
	FOR(x = 1; x <= LENGTH_ARRAY(vdvPC); x++){
		IF(myPCMonitor.PC[x].REF == pREF){
			RETURN x
		}
	}
}
DEFINE_FUNCTION INTEGER fnGetServiceIndex(INTEGER pPC, CHAR pNAME[]){
	STACK_VAR INTEGER x
	FOR(x = 1; x <= MAX_SERVICES; x++){
		IF(myPCMonitor.PC[pPC].SERVICE[x].NAME == pNAME){
			RETURN x
		}
	}
}
DEFINE_FUNCTION INTEGER fnAddService(INTEGER pPC,CHAR pNAME[],CHAR pKEY[]){
	STACK_VAR INTEGER x
	FOR(x = 1; x <= MAX_SERVICES; x++){
		IF(!LENGTH_ARRAY(myPCMonitor.PC[pPC].SERVICE[x].NAME)){
			myPCMonitor.PC[pPC].SERVICE[x].NAME = pNAME
			myPCMonitor.PC[pPC].SERVICE[x].KEY = pKEY
			RETURN x
		}
	}
}
DEFINE_FUNCTION fnRemoveService(INTEGER pPC,CHAR pNAME[]){
	STACK_VAR INTEGER x
	STACK_VAR uService blankService
	FOR(x = 1; x <= MAX_SERVICES; x++){
		IF(myPCMonitor.PC[pPC].SERVICE[x].NAME == pNAME){
			BREAK
		}
	}
	FOR(x = x; x < MAX_SERVICES; x++){
		myPCMonitor.PC[pPC].SERVICE[x] = myPCMonitor.PC[pPC].SERVICE[x+1]
	}
	myPCMonitor.PC[pPC].SERVICE[MAX_SERVICES] = blankService
}

DEFINE_FUNCTION fnProcessFeedback(CHAR pDATA[]){

	STACK_VAR CHAR 	PC_REF[255]
	STACK_VAR CHAR 	PC_LOC[255]
	STACK_VAR CHAR 	PC_DESC[255]
	STACK_VAR INTEGER PC_INDEX
	STACK_VAR INTEGER x

	fnDebug('     PC->', DATA.TEXT)

	PC_REF 	= fnStripCharsRight(REMOVE_STRING(pDATA,'|',1),1)
	PC_LOC  	= fnStripCharsRight(REMOVE_STRING(pDATA,'|',1),1)
	PC_DESC  = fnStripCharsRight(REMOVE_STRING(pDATA,'|',1),1)

	fnDebug('   DETAIL', "PC_REF,',',PC_LOC,',',PC_DESC")

	PC_INDEX = fnGetPCIndex(PC_REF)

	IF(PC_INDEX){
		IF(myPCMonitor.PC[PC_INDEX].LOC != PC_LOC){
			myPCMonitor.PC[PC_INDEX].LOC  = PC_LOC
			SEND_STRING vdvPC[PC_INDEX], "'PROPERTY-META,LOCATION,',myPCMonitor.PC[PC_INDEX].LOC"
		}
		IF(myPCMonitor.PC[PC_INDEX].DESC != PC_DESC){
			myPCMonitor.PC[PC_INDEX].DESC  = PC_DESC
			SEND_STRING vdvPC[PC_INDEX], "'PROPERTY-META,DESC,',myPCMonitor.PC[PC_INDEX].DESC"
		}
		// Restart Comms Timer
		IF(TIMELINE_ACTIVE(TLID_COMMS_000+PC_INDEX)){TIMELINE_KILL(TLID_COMMS_000+PC_INDEX)}
		TIMELINE_CREATE(TLID_COMMS_000+PC_INDEX,TLT_COMMS,LENGTH_ARRAY(TLT_COMMS),TIMELINE_ABSOLUTE,TIMELINE_ONCE)

		FOR(x = 1 ; x <= MAX_SERVICES; x++){
			myPCMonitor.PC[PC_INDEX].SERVICE[x].SEEN = FALSE
		}
		WHILE(FIND_STRING(pDATA,'|',1)){
			STACK_VAR INTEGER	pSERVICE_INDEX
			STACK_VAR CHAR 	pSERVICE_MSG[255]
			STACK_VAR CHAR 	pSERVICE_NAME[255]
			STACK_VAR CHAR 	pSERVICE_KEY[255]
			STACK_VAR INTEGER pSERVICE_ACTIVE

			pSERVICE_MSG 	 = fnStripCharsRight(REMOVE_STRING(pDATA,'|',1),1)

			pSERVICE_NAME 	 = fnStripCharsRight(REMOVE_STRING(pSERVICE_MSG,'=',1),1)
			pSERVICE_KEY    = fnRemoveWhiteSpace(pSERVICE_NAME)
			pSERVICE_ACTIVE = ATOI(pSERVICE_MSG)

			pSERVICE_INDEX = fnGetServiceIndex(PC_INDEX,pSERVICE_NAME)

			IF(pSERVICE_INDEX){
				IF(myPCMonitor.PC[PC_INDEX].SERVICE[pSERVICE_INDEX].RUNNING != pSERVICE_ACTIVE){
					myPCMonitor.PC[PC_INDEX].SERVICE[pSERVICE_INDEX].RUNNING  = pSERVICE_ACTIVE
				}
				myPCMonitor.PC[PC_INDEX].SERVICE[pSERVICE_INDEX].SEEN = TRUE
			}
			ELSE{
				pSERVICE_INDEX = fnAddService(PC_INDEX,pSERVICE_NAME,pSERVICE_KEY)
				myPCMonitor.RMS_PEND = TRUE
				myPCMonitor.PC[PC_INDEX].SERVICE[pSERVICE_INDEX].RUNNING  = pSERVICE_ACTIVE
				SEND_STRING vdvPC[PC_INDEX], "'SERVICE-',pSERVICE_NAME,',ADD'"
				myPCMonitor.PC[PC_INDEX].SERVICE[pSERVICE_INDEX].SEEN = TRUE
			}
		}
		FOR(x = MAX_SERVICES ; x >= 1; x--){
			IF(LENGTH_ARRAY(myPCMonitor.PC[PC_INDEX].SERVICE[x].NAME) && !myPCMonitor.PC[PC_INDEX].SERVICE[x].SEEN){
				SEND_STRING vdvPC[PC_INDEX], "'SERVICE-',myPCMonitor.PC[PC_INDEX].SERVICE[x].NAME,',REMOVE'"
				fnRemoveService(PC_INDEX,myPCMonitor.PC[PC_INDEX].SERVICE[x].NAME)
			}
			myPCMonitor.PC[PC_INDEX].SERVICE[x].SEEN = FALSE
		}
		IF(myPCMonitor.RMS_PEND){
			SEND_STRING vdvPC[PC_INDEX], "'SERVICE-UPDATE'"
			myPCMonitor.RMS_PEND = FALSE
		}
	}
}
/******************************************************************************
	Startup
******************************************************************************/
DEFINE_START{
	CREATE_BUFFER ipUDPServer, myPCMonitor.Rx
}
/******************************************************************************
	Virtual Device Events
******************************************************************************/
DEFINE_EVENT DATA_EVENT[vdvPC]{
	COMMAND:{
		SWITCH(fnStripCharsRight(REMOVE_STRING(DATA.TEXT,'-',1),1)){
			CASE 'PROPERTY':{
				SWITCH(fnStripCharsRight(REMOVE_STRING(DATA.TEXT,',',1),1)){
					CASE 'IP_PORT':{
						myPCMonitor.IP_PORT = ATOI(DATA.TEXT)
						IP_SERVER_OPEN(ipUDPServer.PORT,myPCMonitor.IP_PORT,IP_UDP)
					}
					CASE 'ID':{
						myPCMonitor.PC[GET_LAST(vdvPC)].REF = DATA.TEXT
						SEND_STRING DATA.DEVICE, "'PROPERTY-META,NAME,',myPCMonitor.PC[GET_LAST(vdvPC)].REF"
					}
					CASE 'DEBUG':	myPCMonitor.DEBUG = (DATA.TEXT == 'TRUE')
				}
			}
		}
	}
}
DEFINE_PROGRAM{
	STACK_VAR INTEGER x
	FOR(x = 1; x <= MAX_PCS; x++){
		IF(x <= LENGTH_ARRAY(vdvPC)){
			STACK_VAR INTEGER y
			FOR(y = 1; y <= MAX_SERVICES; y++){
				[vdvPC[x],y] = myPCMonitor.PC[x].SERVICE[y].RUNNING
			}
			[vdvPC[x],251] = (TIMELINE_ACTIVE(TLID_COMMS_000+x))
			[vdvPC[x],252] = (TIMELINE_ACTIVE(TLID_COMMS_000+x))
		}
	}
}
/******************************************************************************
	Device Events
******************************************************************************/
DEFINE_EVENT DATA_EVENT[ipUDPServer]{
	STRING:{
		fnDebug('PC[RAW]->', DATA.TEXT)
		WHILE(FIND_STRING(myPCMonitor.Rx,'END',1)){
			fnProcessFeedback(REMOVE_STRING(myPCMonitor.Rx,'END',1))
		}
	}
}























